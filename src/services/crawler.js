/**
 * MissAV Video Crawler Service
 */

const fetch = require('node-fetch');
const cheerio = require('cheerio');
const CONFIG = require('../config/constants');

class MissAVCrawler {
    constructor() {
        this.baseUrl = 'https://missav.ws';
    }

    /**
     * L·∫•y phim hot random t·ª´ MissAV
     */
    async getRandomHotVideo() {
        try {
            console.log('üî• ƒêang l·∫•y phim hot random t·ª´ MissAV...');
            
            let html = '';
            let selectedUrl = '';
            
            // Th·ª≠ t·ª´ng URL cho ƒë·∫øn khi th√†nh c√¥ng
            for (const url of CONFIG.MISSAV_URLS) {
                try {
                    console.log(`üîç ƒêang th·ª≠: ${url}`);
                    const res = await fetch(url, {
                        headers: CONFIG.HEADERS,
                        timeout: CONFIG.REQUEST_TIMEOUT
                    });
                    
                    if (res.ok) {
                        html = await res.text();
                        selectedUrl = url;
                        console.log(`‚úÖ Th√†nh c√¥ng v·ªõi: ${url}`);
                        break;
                    }
                } catch (urlErr) {
                    console.log(`‚ùå L·ªói v·ªõi ${url}: ${urlErr.message}`);
                    continue;
                }
            }
            
            if (!html) {
                throw new Error('Kh√¥ng th·ªÉ truy c·∫≠p b·∫•t k·ª≥ URL n√†o');
            }
            
            return this.parseVideoFromHtml(html);
            
        } catch (err) {
            console.error('‚ùå L·ªói khi l·∫•y MissAV:', err.message);
            return await this.getFallbackVideo();
        }
    }

    /**
     * Parse video t·ª´ HTML
     */
    parseVideoFromHtml(html) {
        const $ = cheerio.load(html);
        let allVideos = [];
        
        // L·∫•y t·∫•t c·∫£ video t·ª´ c√°c selector
        for (const selector of CONFIG.VIDEO_SELECTORS) {
            const videos = $(selector);
            console.log(`üîç Selector "${selector}": ${videos.length} videos`);
            
            videos.each((i, element) => {
                const $el = $(element);
                let href = $el.attr('href');
                
                // Ch·ªâ l·∫•y link c√≥ d·∫°ng phim th·ª±c t·∫ø
                if (href && this.isValidVideoLink(href)) {
                    allVideos.push($el);
                }
            });
            
            if (allVideos.length >= 20) break; // ƒê·ªß r·ªìi th√¨ d·ª´ng
        }
        
        console.log(`üé¨ T√¨m th·∫•y ${allVideos.length} video`);
        
        if (allVideos.length === 0) {
            throw new Error('Kh√¥ng t√¨m th·∫•y video n√†o');
        }
        
        return this.selectRandomVideo(allVideos);
    }

    /**
     * Ki·ªÉm tra link video c√≥ h·ª£p l·ªá kh√¥ng
     */
    isValidVideoLink(href) {
        if (!href) return false;
        
        // Ki·ªÉm tra c√°c pattern cho missav.ws/dm18/vi
        const patterns = [
            /\/dm18\/vi\/[^\/]+/, // /dm18/vi/something
            /[A-Z]{2,}-?\d{3,}/, // ABCD-123 ho·∫∑c AB123
            /\d{6}_\d{3}/, // 123456_789
            /\/\d+\//  // /12345/
        ];
        
        return patterns.some(pattern => pattern.test(href)) && href.includes('/dm18/vi/');
    }

    /**
     * Ch·ªçn random video t·ª´ danh s√°ch
     */
    selectRandomVideo(allVideos) {
        const randomIndex = Math.floor(Math.random() * allVideos.length);
        const selectedVideo = allVideos[randomIndex];
        
        // L·∫•y th√¥ng tin video
        let href = selectedVideo.attr('href');
        const url = this.normalizeUrl(href);
        const title = this.extractTitle(selectedVideo, href);
        const image = this.extractImage(selectedVideo);

        console.log(`üéØ Selected video ${randomIndex + 1}/${allVideos.length}`);
        console.log(`‚úÖ Title: ${title}`);
        console.log(`üîó URL: ${url}`);
        console.log(`üñºÔ∏è Image: ${image || 'No image'}`);
        
        return { 
            title: `üî• ${title}`,
            url, 
            image 
        };
    }

    /**
     * Chu·∫©n h√≥a URL
     */
    normalizeUrl(href) {
        if (!href) return this.baseUrl;
        
        if (href.startsWith('http')) {
            return href;
        } else if (href.startsWith('//')) {
            return `https:${href}`;
        } else {
            return `${this.baseUrl}${href}`;
        }
    }

    /**
     * Tr√≠ch xu·∫•t title t·ª´ element ho·∫∑c URL
     */
    extractTitle(element, href) {
        // Th·ª≠ l·∫•y title t·ª´ nhi·ªÅu ngu·ªìn
        let title = element.find('.text-secondary').text().trim() || 
                   element.find('img').attr('alt') || 
                   element.find('img').attr('title') ||
                   element.attr('title') ||
                   element.find('.title').text().trim() ||
                   element.find('h3').text().trim() ||
                   '';
        
        // N·∫øu kh√¥ng c√≥ title, extract t·ª´ URL
        if (!title && href) {
            const codeMatch = href.match(/([A-Z]{2,}-?\d{3,}|\d{6}_\d{3})/);
            title = codeMatch ? codeMatch[1] : 'JAV Video';
        }
        
        return title || 'Hot JAV Video';
    }

    /**
     * Tr√≠ch xu·∫•t image t·ª´ element
     */
    extractImage(element) {
        const imgElement = element.find('img').first();
        let image = imgElement.attr('data-src') || 
                    imgElement.attr('src') || 
                    imgElement.attr('data-original') ||
                    imgElement.attr('data-lazy-src') ||
                    imgElement.attr('data-srcset');

        if (image) {
            image = this.normalizeUrl(image);
        }

        return image;
    }

    /**
     * L·∫•y video fallback khi g·∫∑p l·ªói
     */
    async getFallbackVideo() {
        try {
            console.log('üîÑ Th·ª≠ fallback...');
            const res = await fetch(this.baseUrl + '/dm18/vi', {
                headers: CONFIG.HEADERS,
                timeout: 10000
            });
            
            if (!res.ok) throw new Error('Fallback failed');
            
            const html = await res.text();
            const $ = cheerio.load(html);
            
            const firstLink = $('a[href*="/dm18/vi/"]').first();
            if (firstLink.length) {
                const href = firstLink.attr('href');
                const url = this.normalizeUrl(href);
                const img = firstLink.find('img');
                const title = img.attr('alt') || img.attr('title') || 'JAV Video';
                
                return {
                    title: `üÜò ${title}`,
                    url,
                    image: this.normalizeUrl(img.attr('data-src') || img.attr('src'))
                };
            }
        } catch (fallbackErr) {
            console.error('‚ùå Fallback c≈©ng l·ªói:', fallbackErr.message);
        }
        
        return null;
    }
}

module.exports = new MissAVCrawler();
