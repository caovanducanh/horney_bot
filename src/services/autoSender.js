/**
 * Auto Sender Service - Handles scheduled video sending
 */

const CONFIG = require('../config/constants');
const crawler = require('./crawler');
const messageService = require('./messageService');

class AutoSenderService {
    constructor() {
        this.intervalId = null;
        this.isRunning = false;
        this.channel = null;
    }

    /**
     * B·∫Øt ƒë·∫ßu g·ª≠i video t·ª± ƒë·ªông
     */
    async start(client) {
        try {
            this.channel = await client.channels.fetch(CONFIG.CHANNEL_ID);
            if (!this.channel) {
                console.error('‚ùå Kh√¥ng t√¨m th·∫•y k√™nh.');
                return false;
            }

            console.log(`ü§ñ B·∫Øt ƒë·∫ßu g·ª≠i phim HOT random m·ªói 5 ph√∫t v√†o k√™nh: ${this.channel.name}`);
            
            // G·ª≠i video ƒë·∫ßu ti√™n ngay l·∫≠p t·ª©c
            await this.sendVideo();
            
            // Thi·∫øt l·∫≠p interval ƒë·ªÉ g·ª≠i ƒë·ªãnh k·ª≥
            this.intervalId = setInterval(async () => {
                console.log('‚è∞ ƒê·∫øn gi·ªù g·ª≠i video t·ª± ƒë·ªông...');
                await this.sendVideo();
            }, CONFIG.AUTO_SEND_INTERVAL);
            
            this.isRunning = true;
            return true;

        } catch (err) {
            console.error('‚ùå L·ªói khi thi·∫øt l·∫≠p auto sending:', err.message);
            return false;
        }
    }

    /**
     * D·ª´ng g·ª≠i video t·ª± ƒë·ªông
     */
    stop() {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
        this.isRunning = false;
        console.log('‚èπÔ∏è ƒê√£ d·ª´ng g·ª≠i video t·ª± ƒë·ªông');
    }

    /**
     * G·ª≠i video
     */
    async sendVideo() {
        if (!this.channel) {
            console.error('‚ùå Channel kh√¥ng kh·∫£ d·ª•ng');
            return false;
        }

        try {
            const video = await crawler.getRandomHotVideo();
            if (!video) {
                console.log('‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c video');
                return false;
            }

            return await messageService.sendVideoToChannel(this.channel, video);

        } catch (err) {
            console.error('‚ùå L·ªói khi g·ª≠i video t·ª± ƒë·ªông:', err.message);
            return false;
        }
    }

    /**
     * G·ª≠i video theo y√™u c·∫ßu (l·ªánh #link)
     */
    async sendVideoOnDemand(channel, userTag) {
        try {
            console.log(`üé¨ ${userTag} y√™u c·∫ßu link video hot random`);
            
            // G·ª≠i th√¥ng b√°o ƒëang t√¨m ki·∫øm
            const searchMsg = await messageService.sendSearchingMessage(channel);
            
            // L·∫•y video
            const video = await crawler.getRandomHotVideo();
            if (!video) {
                await messageService.sendErrorMessage(channel);
                return false;
            }

            // X√≥a tin nh·∫Øn "ƒëang t√¨m ki·∫øm" n·∫øu c√≥
            if (searchMsg) {
                try {
                    await searchMsg.delete();
                } catch (deleteErr) {
                    // Ignore delete error
                }
            }

            // G·ª≠i video
            return await messageService.sendVideoToChannel(channel, video);

        } catch (err) {
            console.error('‚ùå L·ªói khi x·ª≠ l√Ω l·ªánh #link:', err.message);
            await messageService.sendErrorMessage(channel, CONFIG.MESSAGES.FALLBACK_ERROR);
            return false;
        }
    }

    /**
     * L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i
     */
    getStatus() {
        return {
            isRunning: this.isRunning,
            hasChannel: !!this.channel,
            channelName: this.channel ? this.channel.name : null,
            interval: CONFIG.AUTO_SEND_INTERVAL / 1000 / 60 // minutes
        };
    }
}

module.exports = new AutoSenderService();
